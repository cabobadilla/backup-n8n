{
  "createdAt": "2025-09-07T02:39:16.345Z",
  "updatedAt": "2025-09-07T02:39:16.345Z",
  "id": "wVOtXxnTbQedFCuu",
  "name": "PDF from GDrive",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "id": "fa2dffd5-7cc7-40d3-9c2e-5e9990406ea1",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1984,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://script.google.com/macros/s/<YOUR_DEPLOY_ID>/exec",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "meta"
            },
            {
              "name": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `The id of the template requested by the user comes here.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "b6b98fce-3387-49f5-9f50-77aa33279053",
      "name": "GetMetaData",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        2432,
        368
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Merhaba! üëã\nMy name is DocAgent. ",
        "options": {}
      },
      "id": "743b2f52-dc1a-4551-bf51-db646fad29f9",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        1952,
        48
      ],
      "webhookId": "6c3d3341-4e58-40c9-b399-96c67481ed4a",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are ‚ÄúLegal-Doc Agent‚Äù, an expert that drafts professional Turkish\ndocuments from fixed Google Docs templates.\n\n<templateCatalog>\n{{ YOUR_MANUAL_TO_ADD_TEMPLATE_LIST }}\n</templateCatalog> \n\n#TOOLS AND USAGE RULES\nGetMetaData(id)                           ‚Üí { placeholders\\[], conditionals\\[] }\nDocProcess(user_choice_name, user_choice_id, data{}) ‚Üí \n\n(Call a tool by replying ONLY with\n{\"tool\":\"ToolName\",\"params\":{...}} )\n\n\n#FLOW\nstep-1 Determine which document in the templateCatalog the user wants to create.\nstep-2 Call GetMetaData with the identified id.  \n         ‚Üí You get back:\n           ‚Ä¢ metadata.placeholders       (global/static placeholders)\n           ‚Ä¢ metadata.conditionals[]     (each has flag, label, help, placeholders[])\n\nstep-3 Request the necessary information from the user:\n         a) For each name in metadata.placeholders, ask ‚ÄúWhat is <PLACEHOLDER>? ‚Äù\n         b) For each item in metadata.conditionals:\n              i.   Ask ‚ÄúWould you like to include the <label> section? <help>‚Äù\n              ii.  Record in blocks[KEY].include = true/false\n              iii. If include===true, then for each p in placeholders[] ask ‚ÄúWhat is <p>? ‚Äù\n         ‚Üí Build up a `data` object:\n            {\n              /* static values from 3a */,\n              blocks: {\n                KEY1: { include: true,  P1: val1, P2: val2‚Ä¶ },\n                KEY2: { include: false            },\n                ‚Ä¶\n              }\n            }\n\nstep-4 After collecting all the required information, submit the information provided by the user to the user for approval as a whole.\nstep-5 Using the `docId` and that `data` object, call the DocProcess (FillDocument) tool.\n\nstep-6 If there are no errors, return the new document‚Äôs download URL (or ID) to the user indicating success.\n\n\n#STYLE\n‚Ä¢ Speak concise, formal Turkish.\n‚Ä¢ Never guess data; always ask.\n‚Ä¢ Only tool-call messages may contain JSON blocks.\n\n#RULES\nWhen calling DocProcess, DO NOT CHANGE/TRANSLATE the placeholder names and conditional flag names/structure returned by GetMetaData. Only place the answers you obtained from the user next to them.\n"
        }
      },
      "id": "64d3a5f0-c225-434a-8c82-ccafacb69047",
      "name": "DocAgent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2240,
        48
      ],
      "retryOnFail": true,
      "typeVersion": 2
    },
    {
      "parameters": {
        "description": "Call this tool for Doc Process",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "<YOUR_WORKFLOW_ID>"
        },
        "workflowInputs": {
          "value": {
            "data": "={{ $fromAI('data') }}",
            "user_choice_id": "={{ $fromAI('user_choice_id') }}",
            "user_choice_name": "={{ $fromAI('user_choice_name') }}"
          },
          "schema": [
            {
              "id": "user_choice_name",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "user_choice_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "user_choice_id",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "user_choice_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "data",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "data",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "1e7756bf-c52e-4724-87ea-1750ee940022",
      "name": "DocProcess",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        2608,
        368
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "2c5b1038-5d34-4032-8e8a-ec8d55ddb2c6",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "position": [
        2208,
        368
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/drive/v3/files?q='%3CYOUR_PARENT_ID%3E'+in+parents+and+trashed=false&fields=files(id,name,description)&pageSize=1000",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "e72702bb-6b0f-42aa-b814-7e4f54de88ae",
      "name": "Template List",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1504,
        512
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## Manual Template List Retrieval\n**The response returned from this API request is manually added to the system prompt.\n\n",
        "height": 360,
        "width": 260,
        "color": 4
      },
      "id": "0c934d15-9b4a-409a-aa55-5fdee9cb3a59",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**It is preferred for more consistent memory management. Other alternatives can also be tried.",
        "height": 320,
        "width": 180
      },
      "id": "e8e735b2-dcce-466d-8574-752fdc3089d9",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Metadata of the template selected by the user is dynamically retrieved.",
        "height": 320,
        "width": 180
      },
      "id": "44e9914e-81c5-472d-a449-4dfd3b7d4756",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2384,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Prioritized due to free API-Key trial.",
        "height": 320,
        "width": 180
      },
      "id": "c98552b8-9933-4ef7-bdea-78d0dde041ec",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1952,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Description  \n\n## 1 ‚Äî What Does It Do / Which Problem Does It Solve?\n\nThis workflow turns Google Docs-based contract & form templates into **ready-to-sign PDFs in minutes**‚Äîall from a single chat flow.\n\n- **Automates repetitive document creation.** Instead of copying a rental, sales, or NDA template and filling it by hand every time, the bot asks for the required values and fills them in.\n- **Eliminates human error.** It lists every mandatory field so nothing is missed, and removes unnecessary clauses via conditional blocks.\n- **Speeds up approvals.** The final draft arrives as a direct PDF link‚Äîone click to send for signing.\n- **One template ‚Üí unlimited variations.** Every new template you drop in Drive is auto-listed with **zero workflow edits‚Äî**it scales effortlessly.\n- **100 % no-code.** Runs on n8n + Google Apps Script‚Äîno extra backend, self-hosted or cloud.\n\n---\n\n## 2 ‚Äî How It Works (Detailed Flow)\n\n1. üìù **Template Discovery**\n    \n    üìÇ The **TemplateList** node scans the Drive folder you specify via the `?mode=meta` endpoint and returns an `id / title / desc` list. The bot shows this list in chat.\n    \n2. üéØ **Selection & Metadata Fetch**\n    \n    The user types a template name.\n    \n    üîç **GetMetaData** opens the chosen Doc, extracts `META_JSON`, placeholders, and conditional blocks, then lists mandatory & optional fields.\n    \n3. üó£ **Data-Collection Loop**\n    - The bot asks for every **placeholder** value.\n    - For each **conditional block** it asks üü¢ **Yes** / üî¥ **No**.\n        \n        Answers are accumulated in a `data` JSON object.\n        \n4. ‚úÖ **Final Confirmation**\n    \n    The bot summarizes the inputs ‚Üí when the user clicks **Confirm**, the *DocProcess* sub-workflow starts.\n    \n5. ‚öôÔ∏è **DocProcess Sub-Workflow**\n    \n    \n    | üîß Step | Node | Task |\n    | --- | --- | --- |\n    | 1 | **User Choice Match Check** | Verifies name‚ÄìID match; throws if wrong |\n    | 2 | **GetMetaData (renew)** | Gets the latest placeholder list |\n    | 3 | **Validate JSON Format** | Checks for missing / unknown fields |\n    | 4 | **CopyTemplate** | Copies the Doc via Drive API |\n    | 5 | **FillDocument** | Apps Script fills placeholders & removes blocks |\n    | 6 | **Generate PDF Link** | Builds an `export?format=pdf` URL |\n6. üìé **Delivery**\n    \n    The master agent sends **üîó Download PDF** & **‚úèÔ∏è Open Google Doc** links.\n    \n7. üö´ **Error Paths**\n    - `status:\"ERROR\", missing:[‚Ä¶]` ‚Üí bot lists missing fields and re-asks.\n    - `unknown:[‚Ä¶]` ‚Üí template list is outdated; rerun *TemplateList*.\n    - Any Apps Script error ‚Üí the returned `message` is shown verbatim in chat.\n\n---\n\n## 3 ‚Äî üöÄ Setup Steps (Full Checklist)\n\n> Goal: Get a flawless PDF on the first run.\n> \n> \n> Mentally **tick** the ‚òëÔ∏è in front of every line as you go.\n> \n\n### ‚òÅÔ∏è A. Google Drive Preparation\n\n| Step | Do This | Watch Out For |\n| --- | --- | --- |\n| 1 | Create a `Templates/` folder ‚Üí put every template Doc inside | Exactly **one** folder; **no** sub-folders |\n| 2 | Placeholders in every Doc are **`{{UPPER_CASE}}`** | No Turkish chars or spaces |\n| 3 | Wrap optional clauses with **`[[BLOCK_NAME:START]]‚Ä¶[[BLOCK_NAME:END]]`** | The `START` tag must have a **blank line above** |\n| 4 | Add a `META_JSON` block at the very end | Script deletes it automatically after fill |\n| 5 | Right-click Doc > **Details ‚ñ∏ Description** = 1-line human description | Shown by the bot in the list |\n| 6 | Create a second `Generated/` folder (for copies) | Keeps Drive tidy |\n\n> üîë Folder ID (long alphanumerical) = <TEMPLATE_PARENT_ID>\n> \n> \n> We‚Äôll paste this into the TemplateList node next.\n> \n\n[Simple sample template ‚Üí Template Link](https://www.notion.so/Simple-sample-template-Template-Link-22b3f8a1e57f8070beacd034ba6f557f?pvs=21)\n\n---\n\n### üõ† B. Import the Workflow into n8n\n\n```bash\nSettings ‚ñ∏ Import Workflow ‚ñ∏ DocAgent.json\n\n```\n\nIf nodes look **Broken** afterwards ‚Üí no community-node problem; you only need to select credentials.\n\n---\n\n### üìë C. Customize the TemplateList Node\n\n1. Open **Template List** node ‚öôÔ∏è ‚Üí replace\n    \n    `'%3CYOUR_PARENT_ID%3E' in parents`\n    \n    with the real **folder ID** in the **URL**.\n    \n2. Right-click node > **Execute Node**.\n3. Copy the entire JSON response.\n4. In the editor paste it into:\n    - **DocAgent** ‚Üí *System Prompt* (top)\n    - **User Choice Match Check** ‚Üí *System Prompt* (top)\n        \n        Save.\n        \n\n> ‚ö†Ô∏è Why manual? Caching the list saves LLM tokens. Whenever you add a template, rerun the node and update the prompts.\n> \n\n---\n\n### üîó D. Deploy the Apps Script\n\n| Step | Screen | Note |\n| --- | --- | --- |\n| 1 | Open Gist files **GetMetaData.gs** + **FillDocument.gs** ‚Üí *File ‚ñ∏ Make a copy* | Both files may live in one project |\n| 2 | *Project Settings* > enable **Google Docs API** ‚úîÔ∏è & **Google Drive API** ‚úîÔ∏è | Otherwise you‚Äôll see 403 errors |\n| 3 | *Deploy ‚ñ∏ New deployment ‚ñ∏ Web app* |  |\n| ‚Ä¢ Execute as | **Me** |  |\n| ‚Ä¢ Who has access | **Anyone** |  |\n| 4 | On the consent screen allow scopes:‚Ä¢ `‚Ä¶/auth/documents`‚Ä¢ `‚Ä¶/auth/drive` | Click **Advanced ‚Ä∫ Go** if Google warns |\n| 5 | Copy the **Web App URL** (e.g. `https://script.google.com/macros/s/ABC123/exec`) | If this URL changes, update n8n |\n\n[Apps Script source code ‚Üí Notion Link](https://www.notion.so/Apps-Script-source-code-Notion-Link-22b3f8a1e57f8015a280d90de16c031f?pvs=21)\n\n---\n\n### üîß E. Wire the Script URL in n8n\n\n| Node | Field | Action |\n| --- | --- | --- |\n| **GetMetaData** | *URL* | `<WEB_APP_URL>?mode=meta&id={{ $json[\"id\"] }}` |\n| **FillDocument** | *URL* | `<WEB_APP_URL>` |\n\n> üí° Prefer using an .env file? Add GAS_WEBAPP_URL=‚Ä¶ and reference it as {{ $env.GAS_WEBAPP_URL }}.\n> \n\n---\n\n### üîê F. Add Credentials\n\n- **Google Drive OAuth2** ‚Üí *Drive API (v3) Full Access*\n- **Google Docs OAuth2** ‚Üí same account\n- **LLM key** (OpenAI / Gemini)\n- (Optional) **Postgres Chat Memory** credential for the corresponding node\n\n---\n\n### üß™ G. First Run (Smoke Test)\n\n1. Switch the workflow **Active**.\n2. In the chat panel type `/start`.\n3. Bot lists templates ‚Üí pick one.\n4. Fill mandatory fields, optionally toggle blocks ‚Üí **Confirm**.\n5. **üîó Download PDF** link appears ‚Üí ‚òëÔ∏è setup complete.\n\n---\n\n### ‚ùå H. Common Errors & Fixes\n\n| üÜò Error | Likely Cause | Remedy |\n| --- | --- | --- |\n| `403: Apps Script permission denied` | Web app access set to *User* | Redeploy as **Anyone**, re-authorize scopes |\n| `placeholder validation failed` | Missing required field | Provide the listed values ‚Üí rerun DocProcess |\n| `unknown placeholders: ‚Ä¶` | Template vs. agent mismatch | Check placeholder spelling (UPPER_CASE ASCII) |\n| `Template ID not found` | Prompt list is old | Rerun **TemplateList** ‚Üí update both prompts |\n| `Cannot find META_JSON` | No meta block / wrong tag | Add `[[META_JSON_START]] ‚Ä¶ [[META_JSON_END]]`, retry |\n\n---\n\n### ‚úÖ Final Checklist\n\n- [ ]  Drive folder structure & template rules ready\n- [ ]  Workflow imported, folder ID set in node\n- [ ]  TemplateList output pasted into both prompts\n- [ ]  Apps Script deployed, URL set in nodes\n- [ ]  OAuth credentials & LLM key configured\n- [ ]  `/start` test passes, PDF link received\n\n---\n\n## üôã‚Äç‚ôÇÔ∏è Need Help with Customizations?\n\nReach out for consulting & support on LinkedIn: [**√ñzg√ºr Karateke**](https://www.linkedin.com/in/%C3%B6zg%C3%BCr-karateke-130514147/)\n\n[Simple sample template ‚Üí Template Link](https://www.notion.so/Simple-sample-template-Template-Link-22b3f8a1e57f8070beacd034ba6f557f?pvs=21)\n\n[Apps Script source code ‚Üí Notion Link](https://www.notion.so/Apps-Script-source-code-Notion-Link-22b3f8a1e57f8015a280d90de16c031f?pvs=21)",
        "height": 4140,
        "width": 1280,
        "color": 6
      },
      "id": "b95549c0-1e07-40b8-8679-87618eb802be",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## DocProcess (Subworkflow)",
        "height": 1040,
        "width": 3640,
        "color": 4
      },
      "id": "c97fc19d-5ffa-45b6-ae0a-58ac503f6f8f",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1904,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "user_choice_name"
            },
            {
              "name": "user_choice_id"
            },
            {
              "name": "data",
              "type": "object"
            }
          ]
        }
      },
      "id": "58a04bdd-d432-4b62-89b2-bf0a097850b5",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        2080,
        1088
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a78bfdab-11cc-4ef1-8074-1fdcd6f14275",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.output.eslesme }}",
              "rightValue": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "ff9353bf-902c-4a75-9084-12902e604736",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        2672,
        1088
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "id": "a1d03e79-47e7-4bbe-968a-6e16d424ef8e",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        3632,
        1200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"eslesme\": true,\n\t\"user_choice_name\": \"SATI≈û S√ñZLE≈ûMESƒ∞\",\n    \"user_choice_id\": \"<EXAMPLE_TEMPLATE_ID>\"\n}"
      },
      "id": "992b2b3c-e147-4cf0-a815-d810ebbd382e",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        2448,
        1312
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "12896581-1580-4690-ab97-449612d1ddf5",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        3328,
        992
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "91055448-6534-40ca-939b-dfbdf2974ab1",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $('Format Control').item.json.output.docId }}",
              "rightValue": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fc4d81df-d1a4-4ac7-8665-0af9bb17a361",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "position": [
        4352,
        992
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb4572fd-8cc7-4e85-860b-aabbb6b1038d",
              "name": "Belge olu≈üturulamama sebebi:",
              "type": "string",
              "value": "=Please consult the user to resolve the following error.\n{{ $('FillDocument').item.json.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1e7d8e95-9d4e-49b7-91f1-edcc4d2cdf93",
      "name": "Other Errors",
      "type": "n8n-nodes-base.set",
      "position": [
        5232,
        1488
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "c35889e4-f027-49b9-9b59-69cf996f0e9c",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('FillDocument').item.json.unknown }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Template Technical Error"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "08a43597-51af-4632-82c5-ff54505bae13",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('FillDocument').item.json.missing }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Incomplete Information Error"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "b42acb05-8237-46c2-80f4-27cfb1232710",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "leftValue": "={{ $('FillDocument').item.json.message }}",
                    "rightValue": " Placeholder validation failed"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Other Errors"
            }
          ]
        },
        "options": {}
      },
      "id": "4132423d-1d9c-49f8-aef6-32667570edc6",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        5008,
        1184
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "operation": "copy",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.docId }}"
        },
        "name": "={{ $now.toFormat('dd.MM.yyyy') }} tarihli {{ $('GetMetaData2').item.json.metadata.title }} belgesi",
        "sameFolder": false,
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "id",
          "value": "=<YOUR_FOLDER_ID>"
        },
        "options": {}
      },
      "id": "1bec52f4-3147-4e2a-801d-c7c6574288d0",
      "name": "CopyTemplate",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        4128,
        992
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://script.google.com/macros/s/<YOUR_DEPLOY_ID>/exec",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "docId",
              "value": "={{ $json.id }}"
            },
            {
              "name": "data",
              "value": "={{ $('Formatting Correction').item.json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fd7102e4-9a0b-4e3f-be83-a3ba2c392c67",
      "name": "FillDocument",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        4560,
        1088
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "id": "b0fe932d-037d-4383-a78e-0ad42a4e1585",
      "name": "Google Gemini Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        2320,
        1312
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0bd79b8c-66b5-4a4e-9888-6a0af9276061",
              "name": "pdf_id",
              "type": "string",
              "value": "The template name selected by the user does not match the template matched by the agent. Please check if the template name selected by the user matches its id."
            }
          ]
        },
        "options": {}
      },
      "id": "22f4dc64-f527-404e-81f2-ed052bdd4c27",
      "name": "User Choice Matching Error",
      "type": "n8n-nodes-base.set",
      "position": [
        2880,
        1184
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a616fd3-6227-4902-9d1d-1ca09f14412e",
              "name": "output.user_choice_id",
              "type": "string",
              "value": "={{ $json.output.user_choice_id }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "72c337ff-2a68-400e-ba47-7b0d9a0abec2",
      "name": "User Choice Match Correct",
      "type": "n8n-nodes-base.set",
      "position": [
        2880,
        992
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The reference point is the document name chosen by the user.\n\n<document_name_and_id>\n{{ $json.user_choice_name }}\n{{ $json.user_choice_id }}\n</document_name>\n\n<guide_template_list>\n{{ YOUR_MANUAL_TO_ADD_TEMPLATE_LIST }}\n</guide_template_list>\n\nA match of id information is given according to the document name. Examine this match according to the guide list given to you.\n\nIf match is correct\n\n{\n\"match\": true,\n\"user_choice_name\":\"{{ $json.user_choice_name }}\" ,\n\"user_choice_id\": {{ $json.user_choice_id }}\n}\n\nIf match is incorrect:\n{\n\"match\": false,\n\"user_choice_name\":\"{{ $json.user_choice_name }}\" ,\n\"user_choice_id\": {{ $json.user_choice_id }},\n\"correct_id\":\"WRITE THE ID YOU NEED HERE\"\n}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Cevaplarƒ±nƒ± JSON formatƒ±nda ver."
            }
          ]
        },
        "batching": {}
      },
      "id": "da391874-cfb8-4320-828c-235bd68f2070",
      "name": "User Choice Match Check",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        2304,
        1088
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "url": "https://script.google.com/macros/s/<YOUR_DEPLOY_ID>/exec",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "meta"
            },
            {
              "name": "id",
              "value": "={{ $json.output.user_choice_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "48397ecb-fc92-4c8f-8fa5-55eb664895c4",
      "name": "GetMetaData2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3104,
        992
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Place the actual user answers according to the rules using the metadata information of the document given to you.\n\nMatch only the original metadata placeholder and conditional flags with the answers given by the user. DO NOT change the placeholder and conditional flag texts in the metadata.\n\n<metadata>\n{{ $json.metadata.toJsonString() }}\n</metadata>\n\n<user_answers>\n\n{{ $('When Executed by Another Workflow').item.json.data.toJsonString() }}\n</user_answers>\n\nFormat example of the output you should give:\n\n{\n\"docId\": \"<EXAMPLE_TEMPLATE_ID>\",\n\"data\": {\n// ‚Äî Static (mandatory) placeholders ‚Äî\n\"SELLER_NAME\": \"√ñzg√ºr M√∂zg√ºr\",\n\"BUYER_NAME\": \"Ali Veli\",\n\"PRODUCT_NAME\": \"Computer\",\n\"PRICE\": \"10000\",\n\"DELIVER_DATE\": \"12.06.2025\",\n\"TODAY_DATE\": \"02.07.2025\",\n\n// ‚Äî Conditional blocks in the ‚Äúblocks‚Äù object ‚Äî\n\"blocks\": {\n\"MADATE_INSTALLMENT\": {\n\"include\": false\n// INSTALLMENT_PLAN is not sent because include:false\n},\n\"GUARANTEE\": {\n\"include\": true,\n\"GUARANTEE_PERIOD\": \"24\"\n}\n}\n}\n}",
        "hasOutputParser": true,
        "batching": {}
      },
      "id": "e3e266cf-7bcb-46a3-89f3-5c161576deda",
      "name": "Format Control",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        3552,
        992
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "jsCode": "// 1) We get the raw text with $input.first() (direct JS instead of Expression)\n// $input provides access to each item as n8n's global variable.\nconst raw = $input.first().json.text;\n\n// 2) Regex to catch ```json ‚Ä¶ ``` block\nconst match = raw.match(/```json\\s*([\\s\\S]*?)```/i);\n\n// 3) Extract block or use full text\nconst jsonString = match ? match[1] : raw;\n\n// 4) Trim + parse\nconst clean = jsonString.trim();\nlet parsed;\ntry {\n  parsed = JSON.parse(clean);\n} catch (e) {\n  throw new Error(`JSON parse hatasƒ±: ${e.message}\\n\\nRaw i√ßerik:\\n${clean}`);\n}\n\n// 5) Return a single item output\nreturn [{ json: parsed }];\n"
      },
      "id": "6a9c7f51-6eb4-4624-b8a7-6854bad72160",
      "name": "Formatting Correction",
      "type": "n8n-nodes-base.code",
      "position": [
        3904,
        992
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4dec2470-f7cb-4b0a-92a8-31cf88581921",
              "name": "Belge olu≈üturulamama sebebi:",
              "type": "string",
              "value": "=The document id to be filled with the copied document does not match"
            }
          ]
        },
        "options": {}
      },
      "id": "9dbebfd8-8dac-4f21-92e9-64c6baf745e4",
      "name": "Cop. Document ID Matching Error",
      "type": "n8n-nodes-base.set",
      "position": [
        4560,
        880
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "fc031e6c-6bc6-445b-9cd5-f8e749156f88",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.status }}",
              "rightValue": "OK"
            }
          ]
        },
        "options": {}
      },
      "id": "68bf34cf-8a51-4013-8418-6e56397ea479",
      "name": "if",
      "type": "n8n-nodes-base.if",
      "position": [
        4784,
        1088
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $('CopyTemplate').item.json.id }}?fields=webContentLink,exportLinks ",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "options": {}
      },
      "id": "a4dbdf4c-cf36-4ac6-8e08-603fbae7f391",
      "name": "Generate Download Link",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5008,
        880
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9af065e4-ec39-480b-b577-99351ed48228",
              "name": "download_link",
              "type": "string",
              "value": "={{ $json.exportLinks['application/pdf'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "82abeb52-2691-4021-b876-836de4486108",
      "name": "Download Link Format",
      "type": "n8n-nodes-base.set",
      "position": [
        5232,
        880
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4dec2470-f7cb-4b0a-92a8-31cf88581921",
              "name": "Belge olu≈üturulamama sebebi:",
              "type": "string",
              "value": "={{ $('FillDocument').item.json.status }}\nError description:\n{{ $('FillDocument').item.json.message }}\n\n\nL√ºtfen buradaki eksik belgeleri user'dan isteyiniz. T√ºm bilgileri tamamladƒ±ktan sonra tekrar DocProcess aracƒ±nƒ± √ßaƒüƒ±rabilirsiniz. {{ $('FillDocument').item.json.missing.toJsonString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fa5f2d23-ba2b-485b-9c16-16be21129b03",
      "name": "Incomplete Information Error",
      "type": "n8n-nodes-base.set",
      "position": [
        5232,
        1088
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb4572fd-8cc7-4e85-860b-aabbb6b1038d",
              "name": "Belge olu≈üturulamama sebebi:",
              "type": "string",
              "value": "=This is a technical error, you can send the following text to the user: \"Please consult your institution or organization for this issue. The draft that the document you requested was created from is incorrect.\""
            }
          ]
        },
        "options": {}
      },
      "id": "f4a18792-4e0b-4f26-b6ca-1e1133558b7e",
      "name": "Template Technical Error",
      "type": "n8n-nodes-base.set",
      "position": [
        5232,
        1280
      ],
      "typeVersion": 3.4
    }
  ],
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "User Choice Match Correct",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Choice Matching Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if": {
      "main": [
        [
          {
            "node": "Generate Download Link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Cop. Document ID Matching Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FillDocument",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Template Technical Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Incomplete Information Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Other Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DocProcess": {
      "ai_tool": [
        [
          {
            "node": "DocAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Format Control",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetMetaData": {
      "ai_tool": [
        [
          {
            "node": "DocAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CopyTemplate": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FillDocument": {
      "main": [
        [
          {
            "node": "if",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetMetaData2": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Control": {
      "main": [
        [
          {
            "node": "Formatting Correction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "DocAgent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Formatting Correction": {
      "main": [
        [
          {
            "node": "CopyTemplate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Download Link": {
      "main": [
        [
          {
            "node": "Download Link Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Choice Match Check": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "DocAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "User Choice Match Check",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Format Control",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "User Choice Match Check",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "User Choice Match Correct": {
      "main": [
        [
          {
            "node": "GetMetaData2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "DocAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "User Choice Match Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "4afc472a-6de4-42ad-8e54-176f74e742ab",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-07T02:39:16.345Z",
      "updatedAt": "2025-09-07T02:39:16.345Z",
      "role": "workflow:owner",
      "workflowId": "wVOtXxnTbQedFCuu",
      "projectId": "EMKC3HvbWexR6hSv"
    }
  ],
  "tags": []
}